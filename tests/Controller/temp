use GuzzleHttp\Client;
use PHPUnit\Framework\TestCase;

class ScenarioControllerTest extends TestCase
{
    private $client;
    private $id;

    protected function setUp(): void
    {
        // Récupérer l'URL de base depuis la variable d'environnement
        $baseUri = getenv('API_BASE_URL') ?: 'https://backforgejdryr5nsvrg-container-back-forge-jdr.functions.fnc.fr-par.scw.cloud';

        // Créer un client Guzzle avec l'URL de base configurée
        $this->client = new Client([
            'base_uri' => $baseUri,
        ]);
    }

    private function getToken(): string
    {

        // Envoyer une requête POST pour l'authentification et obtenir le token
        $response = $this->client->request('POST', '/api/login_check', [
            'json' => [
                'username' => 'admin@mail.com',
                'password' => 'adminmdp123'
            ]
        ]);

        $this->assertEquals(200, $response->getStatusCode());

        // Récupérer le token de la réponse
        $token = json_decode($response->getBody(), true);
        $this->assertArrayHasKey('token', $token);
        return $token['token'];
    }

    public function testCreateScenario()
    {
        // Récupérer le token JWT
        $token = $this->getToken();

        // Simulation d'une requête POST pour créer un scénario
        $response = $this->client->request('POST', '/api/wikis/1/scenarios', [
            'headers' => [
                'Authorization' => 'Bearer ' . $token,
                'Content-Type' => 'application/json',
            ],
            'json' => [
                'name' => 'titre de scenario',
                'content' => 'mon histoire',
            ]
        ]);

        $this->assertEquals(201, $response->getStatusCode());

        // Décoder la réponse
        $responseContent = json_decode($response->getBody(), true);
        $this->assertArrayHasKey('name', $responseContent);
        $this->assertEquals('titre de scenario', $responseContent['name']);

        // Extraire l'ID
        $this->assertArrayHasKey('id', $responseContent);
        $this->id = $responseContent['id']; // Sauvegarder l'ID pour la modification

    }

    public function testUpdateScenario()
    {
        // Récupérer le token JWT
        $token = $this->getToken();

        // Simulation d'une requête PUT pour mettre à jour un scénario
        $response = $this->client->request('PUT', '/api/wikis/1/scenarios/{$this->id}', [
            'headers' => [
                'Authorization' => 'Bearer ' . $token,
                'Content-Type' => 'application/json',
            ],
            'json' => [
                'name' => 'titre de scenario changé',
                'content' => 'mon histoire modifié',
            ]
        ]);
        
        $this->assertEquals(200, $response->getStatusCode());

        // Décoder la réponse
        $responseContent = json_decode($response->getBody(), true);
        $this->assertEquals('titre de scenario changé', $responseContent['name']);
    } 
}